/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FontItem } from "@pixobe/ui-utils";
import { DropdownOption } from "./components/menu-icon/menu-icon";
import { OptionItem } from "./components/select-menu/select-menu";
export { FontItem } from "@pixobe/ui-utils";
export { DropdownOption } from "./components/menu-icon/menu-icon";
export { OptionItem } from "./components/select-menu/select-menu";
export namespace Components {
    interface CheckBox {
        "label"?: string;
        "name": string;
        /**
          * @default true
         */
        "required": boolean;
        /**
          * @default 'false'
         */
        "value": string;
    }
    interface ColorInput {
        /**
          * @default 'checkbox'
         */
        "appearance": 'checkbox' | 'input';
        /**
          * @default 'false'
         */
        "editable": string | undefined;
        "label"?: string;
        "name": string;
        "swatches": string;
        "value": string;
    }
    interface ColorPicker {
        "color": string;
        /**
          * @default false
         */
        "editMode": boolean;
        /**
          * @default []
         */
        "swatches": string[];
    }
    interface FileUploader {
        "label"?: string;
        /**
          * @default "File"
         */
        "name": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface FontPicker {
        /**
          * @default []
         */
        "fonts": FontItem[];
        "label"?: string;
        /**
          * @default "Fonts"
         */
        "name": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface HtmlForm {
        /**
          * @default {}
         */
        "data": Record<string, any>;
        "formData": () => Promise<Record<string, any>>;
    }
    interface IconAdd {
    }
    interface IconAddCart {
    }
    interface IconAddImage {
    }
    interface IconAligncenter {
    }
    interface IconAlignleft {
    }
    interface IconAlignright {
    }
    interface IconArrow {
    }
    interface IconCart {
    }
    interface IconCircle {
    }
    interface IconClose {
    }
    interface IconCog {
    }
    interface IconDone {
    }
    interface IconEdit {
    }
    interface IconEnvelope {
    }
    interface IconError {
    }
    interface IconFacebook {
    }
    interface IconFliph {
    }
    interface IconFlipv {
    }
    interface IconGallery {
    }
    interface IconImage {
    }
    interface IconInfo {
    }
    interface IconInstagram {
    }
    interface IconMagic {
    }
    interface IconMonogram {
    }
    interface IconPdf {
    }
    interface IconPixobe {
    }
    interface IconPreview {
        /**
          * @default true
         */
        "on": boolean;
    }
    interface IconRedo {
    }
    interface IconRotate {
    }
    interface IconSettings {
    }
    interface IconSpinner {
    }
    interface IconSupport {
    }
    interface IconText {
    }
    interface IconTick {
    }
    interface IconTickCircle {
    }
    interface IconTrash {
    }
    interface IconUpload {
    }
    interface IconUploadImage {
    }
    interface IconWhatsapp {
    }
    interface IconWrench {
    }
    interface IcontextGroup {
        "icon": string;
        "label": string;
        /**
          * @default false
         */
        "rounded": boolean;
    }
    interface InputText {
        "label"?: string;
        "name": string;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default true
         */
        "required": boolean;
        /**
          * @default 'text'
         */
        "type": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface MenuIcon {
        "options"?: DropdownOption[];
        "value": any;
    }
    interface MultiLine {
        "label"?: string;
        "name": string;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default true
         */
        "required": boolean;
        /**
          * @default 5
         */
        "rows": number;
        /**
          * @default ''
         */
        "value": string;
    }
    interface PixobeBanner {
        /**
          * @default 'Pixobe'
         */
        "name": string;
    }
    interface PixobeDialog {
        "close": () => Promise<void>;
        /**
          * @default true
         */
        "modal": boolean;
        "open": () => Promise<void>;
    }
    interface PixobeSpinner {
        "header"?: string;
        "message"?: string;
    }
    interface PixobeToast {
        "message": string;
        /**
          * @default 'success'
         */
        "status": 'success' | 'error';
        /**
          * @default 5
         */
        "timeout": number;
    }
    interface PixobeWatermark {
    }
    interface SelectMenu {
        "label"?: string;
        "name": string;
        /**
          * @default []
         */
        "options": OptionItem[];
        /**
          * @default true
         */
        "required": boolean;
        /**
          * @default ''
         */
        "value": string;
    }
}
export interface ColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLColorInputElement;
}
export interface ColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLColorPickerElement;
}
export interface FileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFileUploaderElement;
}
export interface MenuIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMenuIconElement;
}
declare global {
    interface HTMLCheckBoxElement extends Components.CheckBox, HTMLStencilElement {
    }
    var HTMLCheckBoxElement: {
        prototype: HTMLCheckBoxElement;
        new (): HTMLCheckBoxElement;
    };
    interface HTMLColorInputElementEventMap {
        "colorChange": string;
        "colorInput": string;
    }
    interface HTMLColorInputElement extends Components.ColorInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLColorInputElementEventMap>(type: K, listener: (this: HTMLColorInputElement, ev: ColorInputCustomEvent<HTMLColorInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLColorInputElementEventMap>(type: K, listener: (this: HTMLColorInputElement, ev: ColorInputCustomEvent<HTMLColorInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLColorInputElement: {
        prototype: HTMLColorInputElement;
        new (): HTMLColorInputElement;
    };
    interface HTMLColorPickerElementEventMap {
        "colorInput": string;
        "colorChange": string;
        "swatchChange": string[];
    }
    interface HTMLColorPickerElement extends Components.ColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLColorPickerElementEventMap>(type: K, listener: (this: HTMLColorPickerElement, ev: ColorPickerCustomEvent<HTMLColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLColorPickerElementEventMap>(type: K, listener: (this: HTMLColorPickerElement, ev: ColorPickerCustomEvent<HTMLColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLColorPickerElement: {
        prototype: HTMLColorPickerElement;
        new (): HTMLColorPickerElement;
    };
    interface HTMLFileUploaderElementEventMap {
        "fileInput": any;
    }
    interface HTMLFileUploaderElement extends Components.FileUploader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFileUploaderElementEventMap>(type: K, listener: (this: HTMLFileUploaderElement, ev: FileUploaderCustomEvent<HTMLFileUploaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFileUploaderElementEventMap>(type: K, listener: (this: HTMLFileUploaderElement, ev: FileUploaderCustomEvent<HTMLFileUploaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFileUploaderElement: {
        prototype: HTMLFileUploaderElement;
        new (): HTMLFileUploaderElement;
    };
    interface HTMLFontPickerElement extends Components.FontPicker, HTMLStencilElement {
    }
    var HTMLFontPickerElement: {
        prototype: HTMLFontPickerElement;
        new (): HTMLFontPickerElement;
    };
    interface HTMLHtmlFormElement extends Components.HtmlForm, HTMLStencilElement {
    }
    var HTMLHtmlFormElement: {
        prototype: HTMLHtmlFormElement;
        new (): HTMLHtmlFormElement;
    };
    interface HTMLIconAddElement extends Components.IconAdd, HTMLStencilElement {
    }
    var HTMLIconAddElement: {
        prototype: HTMLIconAddElement;
        new (): HTMLIconAddElement;
    };
    interface HTMLIconAddCartElement extends Components.IconAddCart, HTMLStencilElement {
    }
    var HTMLIconAddCartElement: {
        prototype: HTMLIconAddCartElement;
        new (): HTMLIconAddCartElement;
    };
    interface HTMLIconAddImageElement extends Components.IconAddImage, HTMLStencilElement {
    }
    var HTMLIconAddImageElement: {
        prototype: HTMLIconAddImageElement;
        new (): HTMLIconAddImageElement;
    };
    interface HTMLIconAligncenterElement extends Components.IconAligncenter, HTMLStencilElement {
    }
    var HTMLIconAligncenterElement: {
        prototype: HTMLIconAligncenterElement;
        new (): HTMLIconAligncenterElement;
    };
    interface HTMLIconAlignleftElement extends Components.IconAlignleft, HTMLStencilElement {
    }
    var HTMLIconAlignleftElement: {
        prototype: HTMLIconAlignleftElement;
        new (): HTMLIconAlignleftElement;
    };
    interface HTMLIconAlignrightElement extends Components.IconAlignright, HTMLStencilElement {
    }
    var HTMLIconAlignrightElement: {
        prototype: HTMLIconAlignrightElement;
        new (): HTMLIconAlignrightElement;
    };
    interface HTMLIconArrowElement extends Components.IconArrow, HTMLStencilElement {
    }
    var HTMLIconArrowElement: {
        prototype: HTMLIconArrowElement;
        new (): HTMLIconArrowElement;
    };
    interface HTMLIconCartElement extends Components.IconCart, HTMLStencilElement {
    }
    var HTMLIconCartElement: {
        prototype: HTMLIconCartElement;
        new (): HTMLIconCartElement;
    };
    interface HTMLIconCircleElement extends Components.IconCircle, HTMLStencilElement {
    }
    var HTMLIconCircleElement: {
        prototype: HTMLIconCircleElement;
        new (): HTMLIconCircleElement;
    };
    interface HTMLIconCloseElement extends Components.IconClose, HTMLStencilElement {
    }
    var HTMLIconCloseElement: {
        prototype: HTMLIconCloseElement;
        new (): HTMLIconCloseElement;
    };
    interface HTMLIconCogElement extends Components.IconCog, HTMLStencilElement {
    }
    var HTMLIconCogElement: {
        prototype: HTMLIconCogElement;
        new (): HTMLIconCogElement;
    };
    interface HTMLIconDoneElement extends Components.IconDone, HTMLStencilElement {
    }
    var HTMLIconDoneElement: {
        prototype: HTMLIconDoneElement;
        new (): HTMLIconDoneElement;
    };
    interface HTMLIconEditElement extends Components.IconEdit, HTMLStencilElement {
    }
    var HTMLIconEditElement: {
        prototype: HTMLIconEditElement;
        new (): HTMLIconEditElement;
    };
    interface HTMLIconEnvelopeElement extends Components.IconEnvelope, HTMLStencilElement {
    }
    var HTMLIconEnvelopeElement: {
        prototype: HTMLIconEnvelopeElement;
        new (): HTMLIconEnvelopeElement;
    };
    interface HTMLIconErrorElement extends Components.IconError, HTMLStencilElement {
    }
    var HTMLIconErrorElement: {
        prototype: HTMLIconErrorElement;
        new (): HTMLIconErrorElement;
    };
    interface HTMLIconFacebookElement extends Components.IconFacebook, HTMLStencilElement {
    }
    var HTMLIconFacebookElement: {
        prototype: HTMLIconFacebookElement;
        new (): HTMLIconFacebookElement;
    };
    interface HTMLIconFliphElement extends Components.IconFliph, HTMLStencilElement {
    }
    var HTMLIconFliphElement: {
        prototype: HTMLIconFliphElement;
        new (): HTMLIconFliphElement;
    };
    interface HTMLIconFlipvElement extends Components.IconFlipv, HTMLStencilElement {
    }
    var HTMLIconFlipvElement: {
        prototype: HTMLIconFlipvElement;
        new (): HTMLIconFlipvElement;
    };
    interface HTMLIconGalleryElement extends Components.IconGallery, HTMLStencilElement {
    }
    var HTMLIconGalleryElement: {
        prototype: HTMLIconGalleryElement;
        new (): HTMLIconGalleryElement;
    };
    interface HTMLIconImageElement extends Components.IconImage, HTMLStencilElement {
    }
    var HTMLIconImageElement: {
        prototype: HTMLIconImageElement;
        new (): HTMLIconImageElement;
    };
    interface HTMLIconInfoElement extends Components.IconInfo, HTMLStencilElement {
    }
    var HTMLIconInfoElement: {
        prototype: HTMLIconInfoElement;
        new (): HTMLIconInfoElement;
    };
    interface HTMLIconInstagramElement extends Components.IconInstagram, HTMLStencilElement {
    }
    var HTMLIconInstagramElement: {
        prototype: HTMLIconInstagramElement;
        new (): HTMLIconInstagramElement;
    };
    interface HTMLIconMagicElement extends Components.IconMagic, HTMLStencilElement {
    }
    var HTMLIconMagicElement: {
        prototype: HTMLIconMagicElement;
        new (): HTMLIconMagicElement;
    };
    interface HTMLIconMonogramElement extends Components.IconMonogram, HTMLStencilElement {
    }
    var HTMLIconMonogramElement: {
        prototype: HTMLIconMonogramElement;
        new (): HTMLIconMonogramElement;
    };
    interface HTMLIconPdfElement extends Components.IconPdf, HTMLStencilElement {
    }
    var HTMLIconPdfElement: {
        prototype: HTMLIconPdfElement;
        new (): HTMLIconPdfElement;
    };
    interface HTMLIconPixobeElement extends Components.IconPixobe, HTMLStencilElement {
    }
    var HTMLIconPixobeElement: {
        prototype: HTMLIconPixobeElement;
        new (): HTMLIconPixobeElement;
    };
    interface HTMLIconPreviewElement extends Components.IconPreview, HTMLStencilElement {
    }
    var HTMLIconPreviewElement: {
        prototype: HTMLIconPreviewElement;
        new (): HTMLIconPreviewElement;
    };
    interface HTMLIconRedoElement extends Components.IconRedo, HTMLStencilElement {
    }
    var HTMLIconRedoElement: {
        prototype: HTMLIconRedoElement;
        new (): HTMLIconRedoElement;
    };
    interface HTMLIconRotateElement extends Components.IconRotate, HTMLStencilElement {
    }
    var HTMLIconRotateElement: {
        prototype: HTMLIconRotateElement;
        new (): HTMLIconRotateElement;
    };
    interface HTMLIconSettingsElement extends Components.IconSettings, HTMLStencilElement {
    }
    var HTMLIconSettingsElement: {
        prototype: HTMLIconSettingsElement;
        new (): HTMLIconSettingsElement;
    };
    interface HTMLIconSpinnerElement extends Components.IconSpinner, HTMLStencilElement {
    }
    var HTMLIconSpinnerElement: {
        prototype: HTMLIconSpinnerElement;
        new (): HTMLIconSpinnerElement;
    };
    interface HTMLIconSupportElement extends Components.IconSupport, HTMLStencilElement {
    }
    var HTMLIconSupportElement: {
        prototype: HTMLIconSupportElement;
        new (): HTMLIconSupportElement;
    };
    interface HTMLIconTextElement extends Components.IconText, HTMLStencilElement {
    }
    var HTMLIconTextElement: {
        prototype: HTMLIconTextElement;
        new (): HTMLIconTextElement;
    };
    interface HTMLIconTickElement extends Components.IconTick, HTMLStencilElement {
    }
    var HTMLIconTickElement: {
        prototype: HTMLIconTickElement;
        new (): HTMLIconTickElement;
    };
    interface HTMLIconTickCircleElement extends Components.IconTickCircle, HTMLStencilElement {
    }
    var HTMLIconTickCircleElement: {
        prototype: HTMLIconTickCircleElement;
        new (): HTMLIconTickCircleElement;
    };
    interface HTMLIconTrashElement extends Components.IconTrash, HTMLStencilElement {
    }
    var HTMLIconTrashElement: {
        prototype: HTMLIconTrashElement;
        new (): HTMLIconTrashElement;
    };
    interface HTMLIconUploadElement extends Components.IconUpload, HTMLStencilElement {
    }
    var HTMLIconUploadElement: {
        prototype: HTMLIconUploadElement;
        new (): HTMLIconUploadElement;
    };
    interface HTMLIconUploadImageElement extends Components.IconUploadImage, HTMLStencilElement {
    }
    var HTMLIconUploadImageElement: {
        prototype: HTMLIconUploadImageElement;
        new (): HTMLIconUploadImageElement;
    };
    interface HTMLIconWhatsappElement extends Components.IconWhatsapp, HTMLStencilElement {
    }
    var HTMLIconWhatsappElement: {
        prototype: HTMLIconWhatsappElement;
        new (): HTMLIconWhatsappElement;
    };
    interface HTMLIconWrenchElement extends Components.IconWrench, HTMLStencilElement {
    }
    var HTMLIconWrenchElement: {
        prototype: HTMLIconWrenchElement;
        new (): HTMLIconWrenchElement;
    };
    interface HTMLIcontextGroupElement extends Components.IcontextGroup, HTMLStencilElement {
    }
    var HTMLIcontextGroupElement: {
        prototype: HTMLIcontextGroupElement;
        new (): HTMLIcontextGroupElement;
    };
    interface HTMLInputTextElement extends Components.InputText, HTMLStencilElement {
    }
    var HTMLInputTextElement: {
        prototype: HTMLInputTextElement;
        new (): HTMLInputTextElement;
    };
    interface HTMLMenuIconElementEventMap {
        "valueChanged": string;
    }
    interface HTMLMenuIconElement extends Components.MenuIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMenuIconElementEventMap>(type: K, listener: (this: HTMLMenuIconElement, ev: MenuIconCustomEvent<HTMLMenuIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMenuIconElementEventMap>(type: K, listener: (this: HTMLMenuIconElement, ev: MenuIconCustomEvent<HTMLMenuIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMenuIconElement: {
        prototype: HTMLMenuIconElement;
        new (): HTMLMenuIconElement;
    };
    interface HTMLMultiLineElement extends Components.MultiLine, HTMLStencilElement {
    }
    var HTMLMultiLineElement: {
        prototype: HTMLMultiLineElement;
        new (): HTMLMultiLineElement;
    };
    interface HTMLPixobeBannerElement extends Components.PixobeBanner, HTMLStencilElement {
    }
    var HTMLPixobeBannerElement: {
        prototype: HTMLPixobeBannerElement;
        new (): HTMLPixobeBannerElement;
    };
    interface HTMLPixobeDialogElement extends Components.PixobeDialog, HTMLStencilElement {
    }
    var HTMLPixobeDialogElement: {
        prototype: HTMLPixobeDialogElement;
        new (): HTMLPixobeDialogElement;
    };
    interface HTMLPixobeSpinnerElement extends Components.PixobeSpinner, HTMLStencilElement {
    }
    var HTMLPixobeSpinnerElement: {
        prototype: HTMLPixobeSpinnerElement;
        new (): HTMLPixobeSpinnerElement;
    };
    interface HTMLPixobeToastElement extends Components.PixobeToast, HTMLStencilElement {
    }
    var HTMLPixobeToastElement: {
        prototype: HTMLPixobeToastElement;
        new (): HTMLPixobeToastElement;
    };
    interface HTMLPixobeWatermarkElement extends Components.PixobeWatermark, HTMLStencilElement {
    }
    var HTMLPixobeWatermarkElement: {
        prototype: HTMLPixobeWatermarkElement;
        new (): HTMLPixobeWatermarkElement;
    };
    interface HTMLSelectMenuElement extends Components.SelectMenu, HTMLStencilElement {
    }
    var HTMLSelectMenuElement: {
        prototype: HTMLSelectMenuElement;
        new (): HTMLSelectMenuElement;
    };
    interface HTMLElementTagNameMap {
        "check-box": HTMLCheckBoxElement;
        "color-input": HTMLColorInputElement;
        "color-picker": HTMLColorPickerElement;
        "file-uploader": HTMLFileUploaderElement;
        "font-picker": HTMLFontPickerElement;
        "html-form": HTMLHtmlFormElement;
        "icon-add": HTMLIconAddElement;
        "icon-add-cart": HTMLIconAddCartElement;
        "icon-add-image": HTMLIconAddImageElement;
        "icon-aligncenter": HTMLIconAligncenterElement;
        "icon-alignleft": HTMLIconAlignleftElement;
        "icon-alignright": HTMLIconAlignrightElement;
        "icon-arrow": HTMLIconArrowElement;
        "icon-cart": HTMLIconCartElement;
        "icon-circle": HTMLIconCircleElement;
        "icon-close": HTMLIconCloseElement;
        "icon-cog": HTMLIconCogElement;
        "icon-done": HTMLIconDoneElement;
        "icon-edit": HTMLIconEditElement;
        "icon-envelope": HTMLIconEnvelopeElement;
        "icon-error": HTMLIconErrorElement;
        "icon-facebook": HTMLIconFacebookElement;
        "icon-fliph": HTMLIconFliphElement;
        "icon-flipv": HTMLIconFlipvElement;
        "icon-gallery": HTMLIconGalleryElement;
        "icon-image": HTMLIconImageElement;
        "icon-info": HTMLIconInfoElement;
        "icon-instagram": HTMLIconInstagramElement;
        "icon-magic": HTMLIconMagicElement;
        "icon-monogram": HTMLIconMonogramElement;
        "icon-pdf": HTMLIconPdfElement;
        "icon-pixobe": HTMLIconPixobeElement;
        "icon-preview": HTMLIconPreviewElement;
        "icon-redo": HTMLIconRedoElement;
        "icon-rotate": HTMLIconRotateElement;
        "icon-settings": HTMLIconSettingsElement;
        "icon-spinner": HTMLIconSpinnerElement;
        "icon-support": HTMLIconSupportElement;
        "icon-text": HTMLIconTextElement;
        "icon-tick": HTMLIconTickElement;
        "icon-tick-circle": HTMLIconTickCircleElement;
        "icon-trash": HTMLIconTrashElement;
        "icon-upload": HTMLIconUploadElement;
        "icon-upload-image": HTMLIconUploadImageElement;
        "icon-whatsapp": HTMLIconWhatsappElement;
        "icon-wrench": HTMLIconWrenchElement;
        "icontext-group": HTMLIcontextGroupElement;
        "input-text": HTMLInputTextElement;
        "menu-icon": HTMLMenuIconElement;
        "multi-line": HTMLMultiLineElement;
        "pixobe-banner": HTMLPixobeBannerElement;
        "pixobe-dialog": HTMLPixobeDialogElement;
        "pixobe-spinner": HTMLPixobeSpinnerElement;
        "pixobe-toast": HTMLPixobeToastElement;
        "pixobe-watermark": HTMLPixobeWatermarkElement;
        "select-menu": HTMLSelectMenuElement;
    }
}
declare namespace LocalJSX {
    interface CheckBox {
        "label"?: string;
        "name": string;
        /**
          * @default true
         */
        "required"?: boolean;
        /**
          * @default 'false'
         */
        "value"?: string;
    }
    interface ColorInput {
        /**
          * @default 'checkbox'
         */
        "appearance"?: 'checkbox' | 'input';
        /**
          * @default 'false'
         */
        "editable"?: string | undefined;
        "label"?: string;
        "name": string;
        "onColorChange"?: (event: ColorInputCustomEvent<string>) => void;
        "onColorInput"?: (event: ColorInputCustomEvent<string>) => void;
        "swatches"?: string;
        "value"?: string;
    }
    interface ColorPicker {
        "color"?: string;
        /**
          * @default false
         */
        "editMode"?: boolean;
        "onColorChange"?: (event: ColorPickerCustomEvent<string>) => void;
        "onColorInput"?: (event: ColorPickerCustomEvent<string>) => void;
        "onSwatchChange"?: (event: ColorPickerCustomEvent<string[]>) => void;
        /**
          * @default []
         */
        "swatches"?: string[];
    }
    interface FileUploader {
        "label"?: string;
        /**
          * @default "File"
         */
        "name"?: string;
        "onFileInput"?: (event: FileUploaderCustomEvent<any>) => void;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface FontPicker {
        /**
          * @default []
         */
        "fonts"?: FontItem[];
        "label"?: string;
        /**
          * @default "Fonts"
         */
        "name"?: string;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface HtmlForm {
        /**
          * @default {}
         */
        "data"?: Record<string, any>;
    }
    interface IconAdd {
    }
    interface IconAddCart {
    }
    interface IconAddImage {
    }
    interface IconAligncenter {
    }
    interface IconAlignleft {
    }
    interface IconAlignright {
    }
    interface IconArrow {
    }
    interface IconCart {
    }
    interface IconCircle {
    }
    interface IconClose {
    }
    interface IconCog {
    }
    interface IconDone {
    }
    interface IconEdit {
    }
    interface IconEnvelope {
    }
    interface IconError {
    }
    interface IconFacebook {
    }
    interface IconFliph {
    }
    interface IconFlipv {
    }
    interface IconGallery {
    }
    interface IconImage {
    }
    interface IconInfo {
    }
    interface IconInstagram {
    }
    interface IconMagic {
    }
    interface IconMonogram {
    }
    interface IconPdf {
    }
    interface IconPixobe {
    }
    interface IconPreview {
        /**
          * @default true
         */
        "on"?: boolean;
    }
    interface IconRedo {
    }
    interface IconRotate {
    }
    interface IconSettings {
    }
    interface IconSpinner {
    }
    interface IconSupport {
    }
    interface IconText {
    }
    interface IconTick {
    }
    interface IconTickCircle {
    }
    interface IconTrash {
    }
    interface IconUpload {
    }
    interface IconUploadImage {
    }
    interface IconWhatsapp {
    }
    interface IconWrench {
    }
    interface IcontextGroup {
        "icon": string;
        "label": string;
        /**
          * @default false
         */
        "rounded"?: boolean;
    }
    interface InputText {
        "label"?: string;
        "name": string;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default true
         */
        "required"?: boolean;
        /**
          * @default 'text'
         */
        "type"?: string;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface MenuIcon {
        "onValueChanged"?: (event: MenuIconCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "value"?: any;
    }
    interface MultiLine {
        "label"?: string;
        "name": string;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default true
         */
        "required"?: boolean;
        /**
          * @default 5
         */
        "rows"?: number;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface PixobeBanner {
        /**
          * @default 'Pixobe'
         */
        "name"?: string;
    }
    interface PixobeDialog {
        /**
          * @default true
         */
        "modal"?: boolean;
    }
    interface PixobeSpinner {
        "header"?: string;
        "message"?: string;
    }
    interface PixobeToast {
        "message"?: string;
        /**
          * @default 'success'
         */
        "status"?: 'success' | 'error';
        /**
          * @default 5
         */
        "timeout"?: number;
    }
    interface PixobeWatermark {
    }
    interface SelectMenu {
        "label"?: string;
        "name": string;
        /**
          * @default []
         */
        "options"?: OptionItem[];
        /**
          * @default true
         */
        "required"?: boolean;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "check-box": CheckBox;
        "color-input": ColorInput;
        "color-picker": ColorPicker;
        "file-uploader": FileUploader;
        "font-picker": FontPicker;
        "html-form": HtmlForm;
        "icon-add": IconAdd;
        "icon-add-cart": IconAddCart;
        "icon-add-image": IconAddImage;
        "icon-aligncenter": IconAligncenter;
        "icon-alignleft": IconAlignleft;
        "icon-alignright": IconAlignright;
        "icon-arrow": IconArrow;
        "icon-cart": IconCart;
        "icon-circle": IconCircle;
        "icon-close": IconClose;
        "icon-cog": IconCog;
        "icon-done": IconDone;
        "icon-edit": IconEdit;
        "icon-envelope": IconEnvelope;
        "icon-error": IconError;
        "icon-facebook": IconFacebook;
        "icon-fliph": IconFliph;
        "icon-flipv": IconFlipv;
        "icon-gallery": IconGallery;
        "icon-image": IconImage;
        "icon-info": IconInfo;
        "icon-instagram": IconInstagram;
        "icon-magic": IconMagic;
        "icon-monogram": IconMonogram;
        "icon-pdf": IconPdf;
        "icon-pixobe": IconPixobe;
        "icon-preview": IconPreview;
        "icon-redo": IconRedo;
        "icon-rotate": IconRotate;
        "icon-settings": IconSettings;
        "icon-spinner": IconSpinner;
        "icon-support": IconSupport;
        "icon-text": IconText;
        "icon-tick": IconTick;
        "icon-tick-circle": IconTickCircle;
        "icon-trash": IconTrash;
        "icon-upload": IconUpload;
        "icon-upload-image": IconUploadImage;
        "icon-whatsapp": IconWhatsapp;
        "icon-wrench": IconWrench;
        "icontext-group": IcontextGroup;
        "input-text": InputText;
        "menu-icon": MenuIcon;
        "multi-line": MultiLine;
        "pixobe-banner": PixobeBanner;
        "pixobe-dialog": PixobeDialog;
        "pixobe-spinner": PixobeSpinner;
        "pixobe-toast": PixobeToast;
        "pixobe-watermark": PixobeWatermark;
        "select-menu": SelectMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "check-box": LocalJSX.CheckBox & JSXBase.HTMLAttributes<HTMLCheckBoxElement>;
            "color-input": LocalJSX.ColorInput & JSXBase.HTMLAttributes<HTMLColorInputElement>;
            "color-picker": LocalJSX.ColorPicker & JSXBase.HTMLAttributes<HTMLColorPickerElement>;
            "file-uploader": LocalJSX.FileUploader & JSXBase.HTMLAttributes<HTMLFileUploaderElement>;
            "font-picker": LocalJSX.FontPicker & JSXBase.HTMLAttributes<HTMLFontPickerElement>;
            "html-form": LocalJSX.HtmlForm & JSXBase.HTMLAttributes<HTMLHtmlFormElement>;
            "icon-add": LocalJSX.IconAdd & JSXBase.HTMLAttributes<HTMLIconAddElement>;
            "icon-add-cart": LocalJSX.IconAddCart & JSXBase.HTMLAttributes<HTMLIconAddCartElement>;
            "icon-add-image": LocalJSX.IconAddImage & JSXBase.HTMLAttributes<HTMLIconAddImageElement>;
            "icon-aligncenter": LocalJSX.IconAligncenter & JSXBase.HTMLAttributes<HTMLIconAligncenterElement>;
            "icon-alignleft": LocalJSX.IconAlignleft & JSXBase.HTMLAttributes<HTMLIconAlignleftElement>;
            "icon-alignright": LocalJSX.IconAlignright & JSXBase.HTMLAttributes<HTMLIconAlignrightElement>;
            "icon-arrow": LocalJSX.IconArrow & JSXBase.HTMLAttributes<HTMLIconArrowElement>;
            "icon-cart": LocalJSX.IconCart & JSXBase.HTMLAttributes<HTMLIconCartElement>;
            "icon-circle": LocalJSX.IconCircle & JSXBase.HTMLAttributes<HTMLIconCircleElement>;
            "icon-close": LocalJSX.IconClose & JSXBase.HTMLAttributes<HTMLIconCloseElement>;
            "icon-cog": LocalJSX.IconCog & JSXBase.HTMLAttributes<HTMLIconCogElement>;
            "icon-done": LocalJSX.IconDone & JSXBase.HTMLAttributes<HTMLIconDoneElement>;
            "icon-edit": LocalJSX.IconEdit & JSXBase.HTMLAttributes<HTMLIconEditElement>;
            "icon-envelope": LocalJSX.IconEnvelope & JSXBase.HTMLAttributes<HTMLIconEnvelopeElement>;
            "icon-error": LocalJSX.IconError & JSXBase.HTMLAttributes<HTMLIconErrorElement>;
            "icon-facebook": LocalJSX.IconFacebook & JSXBase.HTMLAttributes<HTMLIconFacebookElement>;
            "icon-fliph": LocalJSX.IconFliph & JSXBase.HTMLAttributes<HTMLIconFliphElement>;
            "icon-flipv": LocalJSX.IconFlipv & JSXBase.HTMLAttributes<HTMLIconFlipvElement>;
            "icon-gallery": LocalJSX.IconGallery & JSXBase.HTMLAttributes<HTMLIconGalleryElement>;
            "icon-image": LocalJSX.IconImage & JSXBase.HTMLAttributes<HTMLIconImageElement>;
            "icon-info": LocalJSX.IconInfo & JSXBase.HTMLAttributes<HTMLIconInfoElement>;
            "icon-instagram": LocalJSX.IconInstagram & JSXBase.HTMLAttributes<HTMLIconInstagramElement>;
            "icon-magic": LocalJSX.IconMagic & JSXBase.HTMLAttributes<HTMLIconMagicElement>;
            "icon-monogram": LocalJSX.IconMonogram & JSXBase.HTMLAttributes<HTMLIconMonogramElement>;
            "icon-pdf": LocalJSX.IconPdf & JSXBase.HTMLAttributes<HTMLIconPdfElement>;
            "icon-pixobe": LocalJSX.IconPixobe & JSXBase.HTMLAttributes<HTMLIconPixobeElement>;
            "icon-preview": LocalJSX.IconPreview & JSXBase.HTMLAttributes<HTMLIconPreviewElement>;
            "icon-redo": LocalJSX.IconRedo & JSXBase.HTMLAttributes<HTMLIconRedoElement>;
            "icon-rotate": LocalJSX.IconRotate & JSXBase.HTMLAttributes<HTMLIconRotateElement>;
            "icon-settings": LocalJSX.IconSettings & JSXBase.HTMLAttributes<HTMLIconSettingsElement>;
            "icon-spinner": LocalJSX.IconSpinner & JSXBase.HTMLAttributes<HTMLIconSpinnerElement>;
            "icon-support": LocalJSX.IconSupport & JSXBase.HTMLAttributes<HTMLIconSupportElement>;
            "icon-text": LocalJSX.IconText & JSXBase.HTMLAttributes<HTMLIconTextElement>;
            "icon-tick": LocalJSX.IconTick & JSXBase.HTMLAttributes<HTMLIconTickElement>;
            "icon-tick-circle": LocalJSX.IconTickCircle & JSXBase.HTMLAttributes<HTMLIconTickCircleElement>;
            "icon-trash": LocalJSX.IconTrash & JSXBase.HTMLAttributes<HTMLIconTrashElement>;
            "icon-upload": LocalJSX.IconUpload & JSXBase.HTMLAttributes<HTMLIconUploadElement>;
            "icon-upload-image": LocalJSX.IconUploadImage & JSXBase.HTMLAttributes<HTMLIconUploadImageElement>;
            "icon-whatsapp": LocalJSX.IconWhatsapp & JSXBase.HTMLAttributes<HTMLIconWhatsappElement>;
            "icon-wrench": LocalJSX.IconWrench & JSXBase.HTMLAttributes<HTMLIconWrenchElement>;
            "icontext-group": LocalJSX.IcontextGroup & JSXBase.HTMLAttributes<HTMLIcontextGroupElement>;
            "input-text": LocalJSX.InputText & JSXBase.HTMLAttributes<HTMLInputTextElement>;
            "menu-icon": LocalJSX.MenuIcon & JSXBase.HTMLAttributes<HTMLMenuIconElement>;
            "multi-line": LocalJSX.MultiLine & JSXBase.HTMLAttributes<HTMLMultiLineElement>;
            "pixobe-banner": LocalJSX.PixobeBanner & JSXBase.HTMLAttributes<HTMLPixobeBannerElement>;
            "pixobe-dialog": LocalJSX.PixobeDialog & JSXBase.HTMLAttributes<HTMLPixobeDialogElement>;
            "pixobe-spinner": LocalJSX.PixobeSpinner & JSXBase.HTMLAttributes<HTMLPixobeSpinnerElement>;
            "pixobe-toast": LocalJSX.PixobeToast & JSXBase.HTMLAttributes<HTMLPixobeToastElement>;
            "pixobe-watermark": LocalJSX.PixobeWatermark & JSXBase.HTMLAttributes<HTMLPixobeWatermarkElement>;
            "select-menu": LocalJSX.SelectMenu & JSXBase.HTMLAttributes<HTMLSelectMenuElement>;
        }
    }
}
