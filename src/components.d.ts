/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export namespace Components {
    interface DropdownMenu {
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value": any;
    }
    interface IconAdd {
    }
    interface IconAddCart {
    }
    interface IconAligncenter {
    }
    interface IconAlignleft {
    }
    interface IconAlignright {
    }
    interface IconArrow {
    }
    interface IconCart {
    }
    interface IconCircle {
    }
    interface IconClose {
    }
    interface IconDone {
    }
    interface IconEdit {
    }
    interface IconEnvelope {
    }
    interface IconFacebook {
    }
    interface IconFliph {
    }
    interface IconFlipv {
    }
    interface IconHelp {
    }
    interface IconImage {
    }
    interface IconInfo {
    }
    interface IconInstagram {
    }
    interface IconMagic {
    }
    interface IconMonogram {
    }
    interface IconPixobe {
    }
    interface IconRedo {
    }
    interface IconRotate {
    }
    interface IconSupport {
    }
    interface IconText {
    }
    interface IconUpload {
    }
    interface IconWhatsapp {
    }
    interface IconWrench {
    }
    interface IcontextGroup {
        "icon": string;
        "label": string;
        "rounded": boolean;
    }
    interface PixobeBanner {
        "name": string;
    }
    interface PixobeIcon {
        "icon": string;
    }
    interface PixobeWatermark {
    }
}
export interface DropdownMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownMenuElement;
}
declare global {
    interface HTMLDropdownMenuElementEventMap {
        "valueChanged": string;
    }
    interface HTMLDropdownMenuElement extends Components.DropdownMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDropdownMenuElement: {
        prototype: HTMLDropdownMenuElement;
        new (): HTMLDropdownMenuElement;
    };
    interface HTMLIconAddElement extends Components.IconAdd, HTMLStencilElement {
    }
    var HTMLIconAddElement: {
        prototype: HTMLIconAddElement;
        new (): HTMLIconAddElement;
    };
    interface HTMLIconAddCartElement extends Components.IconAddCart, HTMLStencilElement {
    }
    var HTMLIconAddCartElement: {
        prototype: HTMLIconAddCartElement;
        new (): HTMLIconAddCartElement;
    };
    interface HTMLIconAligncenterElement extends Components.IconAligncenter, HTMLStencilElement {
    }
    var HTMLIconAligncenterElement: {
        prototype: HTMLIconAligncenterElement;
        new (): HTMLIconAligncenterElement;
    };
    interface HTMLIconAlignleftElement extends Components.IconAlignleft, HTMLStencilElement {
    }
    var HTMLIconAlignleftElement: {
        prototype: HTMLIconAlignleftElement;
        new (): HTMLIconAlignleftElement;
    };
    interface HTMLIconAlignrightElement extends Components.IconAlignright, HTMLStencilElement {
    }
    var HTMLIconAlignrightElement: {
        prototype: HTMLIconAlignrightElement;
        new (): HTMLIconAlignrightElement;
    };
    interface HTMLIconArrowElement extends Components.IconArrow, HTMLStencilElement {
    }
    var HTMLIconArrowElement: {
        prototype: HTMLIconArrowElement;
        new (): HTMLIconArrowElement;
    };
    interface HTMLIconCartElement extends Components.IconCart, HTMLStencilElement {
    }
    var HTMLIconCartElement: {
        prototype: HTMLIconCartElement;
        new (): HTMLIconCartElement;
    };
    interface HTMLIconCircleElement extends Components.IconCircle, HTMLStencilElement {
    }
    var HTMLIconCircleElement: {
        prototype: HTMLIconCircleElement;
        new (): HTMLIconCircleElement;
    };
    interface HTMLIconCloseElement extends Components.IconClose, HTMLStencilElement {
    }
    var HTMLIconCloseElement: {
        prototype: HTMLIconCloseElement;
        new (): HTMLIconCloseElement;
    };
    interface HTMLIconDoneElement extends Components.IconDone, HTMLStencilElement {
    }
    var HTMLIconDoneElement: {
        prototype: HTMLIconDoneElement;
        new (): HTMLIconDoneElement;
    };
    interface HTMLIconEditElement extends Components.IconEdit, HTMLStencilElement {
    }
    var HTMLIconEditElement: {
        prototype: HTMLIconEditElement;
        new (): HTMLIconEditElement;
    };
    interface HTMLIconEnvelopeElement extends Components.IconEnvelope, HTMLStencilElement {
    }
    var HTMLIconEnvelopeElement: {
        prototype: HTMLIconEnvelopeElement;
        new (): HTMLIconEnvelopeElement;
    };
    interface HTMLIconFacebookElement extends Components.IconFacebook, HTMLStencilElement {
    }
    var HTMLIconFacebookElement: {
        prototype: HTMLIconFacebookElement;
        new (): HTMLIconFacebookElement;
    };
    interface HTMLIconFliphElement extends Components.IconFliph, HTMLStencilElement {
    }
    var HTMLIconFliphElement: {
        prototype: HTMLIconFliphElement;
        new (): HTMLIconFliphElement;
    };
    interface HTMLIconFlipvElement extends Components.IconFlipv, HTMLStencilElement {
    }
    var HTMLIconFlipvElement: {
        prototype: HTMLIconFlipvElement;
        new (): HTMLIconFlipvElement;
    };
    interface HTMLIconHelpElement extends Components.IconHelp, HTMLStencilElement {
    }
    var HTMLIconHelpElement: {
        prototype: HTMLIconHelpElement;
        new (): HTMLIconHelpElement;
    };
    interface HTMLIconImageElement extends Components.IconImage, HTMLStencilElement {
    }
    var HTMLIconImageElement: {
        prototype: HTMLIconImageElement;
        new (): HTMLIconImageElement;
    };
    interface HTMLIconInfoElement extends Components.IconInfo, HTMLStencilElement {
    }
    var HTMLIconInfoElement: {
        prototype: HTMLIconInfoElement;
        new (): HTMLIconInfoElement;
    };
    interface HTMLIconInstagramElement extends Components.IconInstagram, HTMLStencilElement {
    }
    var HTMLIconInstagramElement: {
        prototype: HTMLIconInstagramElement;
        new (): HTMLIconInstagramElement;
    };
    interface HTMLIconMagicElement extends Components.IconMagic, HTMLStencilElement {
    }
    var HTMLIconMagicElement: {
        prototype: HTMLIconMagicElement;
        new (): HTMLIconMagicElement;
    };
    interface HTMLIconMonogramElement extends Components.IconMonogram, HTMLStencilElement {
    }
    var HTMLIconMonogramElement: {
        prototype: HTMLIconMonogramElement;
        new (): HTMLIconMonogramElement;
    };
    interface HTMLIconPixobeElement extends Components.IconPixobe, HTMLStencilElement {
    }
    var HTMLIconPixobeElement: {
        prototype: HTMLIconPixobeElement;
        new (): HTMLIconPixobeElement;
    };
    interface HTMLIconRedoElement extends Components.IconRedo, HTMLStencilElement {
    }
    var HTMLIconRedoElement: {
        prototype: HTMLIconRedoElement;
        new (): HTMLIconRedoElement;
    };
    interface HTMLIconRotateElement extends Components.IconRotate, HTMLStencilElement {
    }
    var HTMLIconRotateElement: {
        prototype: HTMLIconRotateElement;
        new (): HTMLIconRotateElement;
    };
    interface HTMLIconSupportElement extends Components.IconSupport, HTMLStencilElement {
    }
    var HTMLIconSupportElement: {
        prototype: HTMLIconSupportElement;
        new (): HTMLIconSupportElement;
    };
    interface HTMLIconTextElement extends Components.IconText, HTMLStencilElement {
    }
    var HTMLIconTextElement: {
        prototype: HTMLIconTextElement;
        new (): HTMLIconTextElement;
    };
    interface HTMLIconUploadElement extends Components.IconUpload, HTMLStencilElement {
    }
    var HTMLIconUploadElement: {
        prototype: HTMLIconUploadElement;
        new (): HTMLIconUploadElement;
    };
    interface HTMLIconWhatsappElement extends Components.IconWhatsapp, HTMLStencilElement {
    }
    var HTMLIconWhatsappElement: {
        prototype: HTMLIconWhatsappElement;
        new (): HTMLIconWhatsappElement;
    };
    interface HTMLIconWrenchElement extends Components.IconWrench, HTMLStencilElement {
    }
    var HTMLIconWrenchElement: {
        prototype: HTMLIconWrenchElement;
        new (): HTMLIconWrenchElement;
    };
    interface HTMLIcontextGroupElement extends Components.IcontextGroup, HTMLStencilElement {
    }
    var HTMLIcontextGroupElement: {
        prototype: HTMLIcontextGroupElement;
        new (): HTMLIcontextGroupElement;
    };
    interface HTMLPixobeBannerElement extends Components.PixobeBanner, HTMLStencilElement {
    }
    var HTMLPixobeBannerElement: {
        prototype: HTMLPixobeBannerElement;
        new (): HTMLPixobeBannerElement;
    };
    interface HTMLPixobeIconElement extends Components.PixobeIcon, HTMLStencilElement {
    }
    var HTMLPixobeIconElement: {
        prototype: HTMLPixobeIconElement;
        new (): HTMLPixobeIconElement;
    };
    interface HTMLPixobeWatermarkElement extends Components.PixobeWatermark, HTMLStencilElement {
    }
    var HTMLPixobeWatermarkElement: {
        prototype: HTMLPixobeWatermarkElement;
        new (): HTMLPixobeWatermarkElement;
    };
    interface HTMLElementTagNameMap {
        "dropdown-menu": HTMLDropdownMenuElement;
        "icon-add": HTMLIconAddElement;
        "icon-add-cart": HTMLIconAddCartElement;
        "icon-aligncenter": HTMLIconAligncenterElement;
        "icon-alignleft": HTMLIconAlignleftElement;
        "icon-alignright": HTMLIconAlignrightElement;
        "icon-arrow": HTMLIconArrowElement;
        "icon-cart": HTMLIconCartElement;
        "icon-circle": HTMLIconCircleElement;
        "icon-close": HTMLIconCloseElement;
        "icon-done": HTMLIconDoneElement;
        "icon-edit": HTMLIconEditElement;
        "icon-envelope": HTMLIconEnvelopeElement;
        "icon-facebook": HTMLIconFacebookElement;
        "icon-fliph": HTMLIconFliphElement;
        "icon-flipv": HTMLIconFlipvElement;
        "icon-help": HTMLIconHelpElement;
        "icon-image": HTMLIconImageElement;
        "icon-info": HTMLIconInfoElement;
        "icon-instagram": HTMLIconInstagramElement;
        "icon-magic": HTMLIconMagicElement;
        "icon-monogram": HTMLIconMonogramElement;
        "icon-pixobe": HTMLIconPixobeElement;
        "icon-redo": HTMLIconRedoElement;
        "icon-rotate": HTMLIconRotateElement;
        "icon-support": HTMLIconSupportElement;
        "icon-text": HTMLIconTextElement;
        "icon-upload": HTMLIconUploadElement;
        "icon-whatsapp": HTMLIconWhatsappElement;
        "icon-wrench": HTMLIconWrenchElement;
        "icontext-group": HTMLIcontextGroupElement;
        "pixobe-banner": HTMLPixobeBannerElement;
        "pixobe-icon": HTMLPixobeIconElement;
        "pixobe-watermark": HTMLPixobeWatermarkElement;
    }
}
declare namespace LocalJSX {
    interface DropdownMenu {
        "onValueChanged"?: (event: DropdownMenuCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value"?: any;
    }
    interface IconAdd {
    }
    interface IconAddCart {
    }
    interface IconAligncenter {
    }
    interface IconAlignleft {
    }
    interface IconAlignright {
    }
    interface IconArrow {
    }
    interface IconCart {
    }
    interface IconCircle {
    }
    interface IconClose {
    }
    interface IconDone {
    }
    interface IconEdit {
    }
    interface IconEnvelope {
    }
    interface IconFacebook {
    }
    interface IconFliph {
    }
    interface IconFlipv {
    }
    interface IconHelp {
    }
    interface IconImage {
    }
    interface IconInfo {
    }
    interface IconInstagram {
    }
    interface IconMagic {
    }
    interface IconMonogram {
    }
    interface IconPixobe {
    }
    interface IconRedo {
    }
    interface IconRotate {
    }
    interface IconSupport {
    }
    interface IconText {
    }
    interface IconUpload {
    }
    interface IconWhatsapp {
    }
    interface IconWrench {
    }
    interface IcontextGroup {
        "icon"?: string;
        "label"?: string;
        "rounded"?: boolean;
    }
    interface PixobeBanner {
        "name"?: string;
    }
    interface PixobeIcon {
        "icon"?: string;
    }
    interface PixobeWatermark {
    }
    interface IntrinsicElements {
        "dropdown-menu": DropdownMenu;
        "icon-add": IconAdd;
        "icon-add-cart": IconAddCart;
        "icon-aligncenter": IconAligncenter;
        "icon-alignleft": IconAlignleft;
        "icon-alignright": IconAlignright;
        "icon-arrow": IconArrow;
        "icon-cart": IconCart;
        "icon-circle": IconCircle;
        "icon-close": IconClose;
        "icon-done": IconDone;
        "icon-edit": IconEdit;
        "icon-envelope": IconEnvelope;
        "icon-facebook": IconFacebook;
        "icon-fliph": IconFliph;
        "icon-flipv": IconFlipv;
        "icon-help": IconHelp;
        "icon-image": IconImage;
        "icon-info": IconInfo;
        "icon-instagram": IconInstagram;
        "icon-magic": IconMagic;
        "icon-monogram": IconMonogram;
        "icon-pixobe": IconPixobe;
        "icon-redo": IconRedo;
        "icon-rotate": IconRotate;
        "icon-support": IconSupport;
        "icon-text": IconText;
        "icon-upload": IconUpload;
        "icon-whatsapp": IconWhatsapp;
        "icon-wrench": IconWrench;
        "icontext-group": IcontextGroup;
        "pixobe-banner": PixobeBanner;
        "pixobe-icon": PixobeIcon;
        "pixobe-watermark": PixobeWatermark;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dropdown-menu": LocalJSX.DropdownMenu & JSXBase.HTMLAttributes<HTMLDropdownMenuElement>;
            "icon-add": LocalJSX.IconAdd & JSXBase.HTMLAttributes<HTMLIconAddElement>;
            "icon-add-cart": LocalJSX.IconAddCart & JSXBase.HTMLAttributes<HTMLIconAddCartElement>;
            "icon-aligncenter": LocalJSX.IconAligncenter & JSXBase.HTMLAttributes<HTMLIconAligncenterElement>;
            "icon-alignleft": LocalJSX.IconAlignleft & JSXBase.HTMLAttributes<HTMLIconAlignleftElement>;
            "icon-alignright": LocalJSX.IconAlignright & JSXBase.HTMLAttributes<HTMLIconAlignrightElement>;
            "icon-arrow": LocalJSX.IconArrow & JSXBase.HTMLAttributes<HTMLIconArrowElement>;
            "icon-cart": LocalJSX.IconCart & JSXBase.HTMLAttributes<HTMLIconCartElement>;
            "icon-circle": LocalJSX.IconCircle & JSXBase.HTMLAttributes<HTMLIconCircleElement>;
            "icon-close": LocalJSX.IconClose & JSXBase.HTMLAttributes<HTMLIconCloseElement>;
            "icon-done": LocalJSX.IconDone & JSXBase.HTMLAttributes<HTMLIconDoneElement>;
            "icon-edit": LocalJSX.IconEdit & JSXBase.HTMLAttributes<HTMLIconEditElement>;
            "icon-envelope": LocalJSX.IconEnvelope & JSXBase.HTMLAttributes<HTMLIconEnvelopeElement>;
            "icon-facebook": LocalJSX.IconFacebook & JSXBase.HTMLAttributes<HTMLIconFacebookElement>;
            "icon-fliph": LocalJSX.IconFliph & JSXBase.HTMLAttributes<HTMLIconFliphElement>;
            "icon-flipv": LocalJSX.IconFlipv & JSXBase.HTMLAttributes<HTMLIconFlipvElement>;
            "icon-help": LocalJSX.IconHelp & JSXBase.HTMLAttributes<HTMLIconHelpElement>;
            "icon-image": LocalJSX.IconImage & JSXBase.HTMLAttributes<HTMLIconImageElement>;
            "icon-info": LocalJSX.IconInfo & JSXBase.HTMLAttributes<HTMLIconInfoElement>;
            "icon-instagram": LocalJSX.IconInstagram & JSXBase.HTMLAttributes<HTMLIconInstagramElement>;
            "icon-magic": LocalJSX.IconMagic & JSXBase.HTMLAttributes<HTMLIconMagicElement>;
            "icon-monogram": LocalJSX.IconMonogram & JSXBase.HTMLAttributes<HTMLIconMonogramElement>;
            "icon-pixobe": LocalJSX.IconPixobe & JSXBase.HTMLAttributes<HTMLIconPixobeElement>;
            "icon-redo": LocalJSX.IconRedo & JSXBase.HTMLAttributes<HTMLIconRedoElement>;
            "icon-rotate": LocalJSX.IconRotate & JSXBase.HTMLAttributes<HTMLIconRotateElement>;
            "icon-support": LocalJSX.IconSupport & JSXBase.HTMLAttributes<HTMLIconSupportElement>;
            "icon-text": LocalJSX.IconText & JSXBase.HTMLAttributes<HTMLIconTextElement>;
            "icon-upload": LocalJSX.IconUpload & JSXBase.HTMLAttributes<HTMLIconUploadElement>;
            "icon-whatsapp": LocalJSX.IconWhatsapp & JSXBase.HTMLAttributes<HTMLIconWhatsappElement>;
            "icon-wrench": LocalJSX.IconWrench & JSXBase.HTMLAttributes<HTMLIconWrenchElement>;
            "icontext-group": LocalJSX.IcontextGroup & JSXBase.HTMLAttributes<HTMLIcontextGroupElement>;
            "pixobe-banner": LocalJSX.PixobeBanner & JSXBase.HTMLAttributes<HTMLPixobeBannerElement>;
            "pixobe-icon": LocalJSX.PixobeIcon & JSXBase.HTMLAttributes<HTMLPixobeIconElement>;
            "pixobe-watermark": LocalJSX.PixobeWatermark & JSXBase.HTMLAttributes<HTMLPixobeWatermarkElement>;
        }
    }
}
